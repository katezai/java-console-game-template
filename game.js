/**
 * Dungeon Mini Game - JavaScript Implementation
 * –í–µ–±-–≤–µ—Ä—Å–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π RPG –∏–≥—Ä—ã
 */

class DungeonGame {
    constructor() {
        this.gameState = {
            player: {
                name: '–ì–µ—Ä–æ–π',
                hp: 20,
                maxHp: 20,
                attack: 5,
                level: 1,
                xp: 0,
                xpToNext: 100,
                class: '–í–æ–∏–Ω',
                inventory: [],
                maxInventorySlots: 8
            },
            currentLocation: '–ü–ª–æ—â–∞–¥—å',
            score: 0,
            world: {},
            isInBattle: false,
            currentBattle: null
        };
        
        this.commands = new Map();
        this.registerCommands();
        this.initWorld();
        this.setupUI();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞
     */
    initWorld() {
        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
        const locations = {
            '–ü–ª–æ—â–∞–¥—å': {
                name: '–ü–ª–æ—â–∞–¥—å',
                description: '–ö–∞–º–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Å —Ñ–æ–Ω—Ç–∞–Ω–æ–º.',
                exits: { north: '–õ–µ—Å' },
                items: [],
                monster: null
            },
            '–õ–µ—Å': {
                name: '–õ–µ—Å',
                description: '–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç–≤—ã –∏ –ø—Ç–∏—á–∏–π —â–µ–±–µ—Ç.',
                exits: { south: '–ü–ª–æ—â–∞–¥—å', east: '–ü–µ—â–µ—Ä–∞' },
                items: [
                    { type: 'potion', name: '–ú–∞–ª–æ–µ –∑–µ–ª—å–µ', heal: 5 },
                    { type: 'key', name: '–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', canOpen: ['–ü–µ—â–µ—Ä–∞->–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞', '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞->–ü–µ—â–µ—Ä–∞'] }
                ],
                monster: { name: '–í–æ–ª–∫', level: 1, hp: 8, loot: [] }
            },
            '–ü–µ—â–µ—Ä–∞': {
                name: '–ü–µ—â–µ—Ä–∞',
                description: '–¢–µ–º–Ω–æ –∏ —Å—ã—Ä–æ.',
                exits: { west: '–õ–µ—Å' }, // north –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
                items: [
                    { type: 'weapon', name: '–†–∂–∞–≤—ã–π –º–µ—á', attackBonus: 2 }
                ],
                monster: { name: '–ì–æ–±–ª–∏–Ω', level: 2, hp: 12, loot: [] }
            },
            '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞': {
                name: '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞',
                description: '–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª–Ω–∞—è —Å–æ–∫—Ä–æ–≤–∏—â! –ù–æ –¥–≤–µ—Ä—å –≤–¥—Ä—É–≥ –∑–∞—Ö–ª–æ–ø–Ω—É–ª–∞—Å—å...',
                exits: {}, // south –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
                items: [
                    { type: 'potion', name: '–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ', heal: 10 },
                    { type: 'weapon', name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á', attackBonus: 5 }
                ],
                monster: null
            }
        };

        this.gameState.world = locations;
        this.gameState.currentLocation = '–ü–ª–æ—â–∞–¥—å';
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏–≥—Ä—ã
     */
    registerCommands() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        this.commands.set('help', (args) => this.showHelp());
        this.commands.set('look', (args) => this.look());
        this.commands.set('move', (args) => this.move(args));
        
        // –ö–æ–º–∞–Ω–¥—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.commands.set('take', (args) => this.take(args));
        this.commands.set('inventory', (args) => this.showInventory());
        this.commands.set('use', (args) => this.use(args));
        
        // –ë–æ–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        this.commands.set('fight', (args) => this.fight());
        this.commands.set('examine', (args) => this.examine());
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        this.commands.set('whoami', (args) => this.whoami());
        this.commands.set('name', (args) => this.name(args));
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.commands.set('save', (args) => this.save(args));
        this.commands.set('load', (args) => this.load(args));
        this.commands.set('scores', (args) => this.showScores());
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        this.commands.set('about', (args) => this.showAbout());
        this.commands.set('exit', (args) => this.exit());
        
        // –í–µ–±-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        this.commands.set('clear', (args) => this.clearOutput());
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    setupUI() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        document.getElementById('command-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.executeCommand();
            }
        });

        document.getElementById('execute-btn').addEventListener('click', () => {
            this.executeCommand();
        });

        this.updateUI();
        this.addOutput('=== DUNGEON MINI GAME ===');
        this.addOutput('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.');
        this.addOutput('–í–≤–µ–¥–∏—Ç–µ \'help\' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: hello –º–æ–π –∏–≥—Ä–æ–∫');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ASCII –∏—Å–∫—É—Å—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É—Ä–æ–≤–Ω—é
     */
    getCharacterArt() {
        const level = this.gameState.player.level;
        
        if (level <= 3) {
            return `     ‚öîÔ∏è
    /|\\
    / \\
    üî∞
   /|\\` + `   –°—Ç–∞—Ç—É—Å: –ù–û–í–û–ë–†–ê–ù–ï–¶ ${'‚≠ê'.repeat(level)}
   –û—Ä—É–∂–∏–µ: –ë–∞–∑–æ–≤–æ–µ
   –ó–∞—â–∏—Ç–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è`;
        } else if (level <= 6) {
            return `    üõ°Ô∏è‚öîÔ∏è
   /|\\üîµ
   / \\
  üî±üî±
 /|\\` + `   –°—Ç–∞—Ç—É—Å: –í–û–ò–ù ${'‚≠ê'.repeat(level)}
   –û—Ä—É–∂–∏–µ: –£–ª—É—á—à–µ–Ω–Ω–æ–µ
   –ó–∞—â–∏—Ç–∞: –°—Ä–µ–¥–Ω—è—è`;
        } else if (level <= 9) {
            return `   üî•‚öîÔ∏èüî•
  /|\\üî•‚≠ê/\\
  / \\üî•
 üî±üî•üî±ÔøΩÔøΩ
/|\\` + `   –°—Ç–∞—Ç—É—Å: –í–ï–¢–ï–†–ê–ù ${'‚≠ê'.repeat(level)}
   –û—Ä—É–∂–∏–µ: –≠–ø–∏—á–µ—Å–∫–æ–µ
   –ó–∞—â–∏—Ç–∞: –í—ã—Å–æ–∫–∞—è`;
        } else {
            return `  üëëüî•‚öîÔ∏èüî•
 /|\\üî•‚≠êüî•\\
 / \\üî•üî•üî•
üî•üëëüî•üëëüî•
/|\\üî•üî•üî•\\` + `   –°—Ç–∞—Ç—É—Å: –õ–ï–ì–ï–ù–î–ê ${'‚≠ê'.repeat(level)}
   –û—Ä—É–∂–∏–µ: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç
   –ó–∞—â–∏—Ç–∞: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è`;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ASCII –∏—Å–∫—É—Å—Å—Ç–≤–∞ –ª–æ–∫–∞—Ü–∏–∏
     */
    getLocationArt(locationName) {
        const locationArts = {
            '–ü–ª–æ—â–∞–¥—å': `    üèõÔ∏è
   /‚ñà‚ñà\\
  /‚ñà‚ñà‚ñà‚ñà\\
 üåäüíßüåä
 ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üö™    –ù    üö™`,
            '–õ–µ—Å': `   üå≥üå≤üå≥
  üåøüåøü¶ÖüêøÔ∏èüåø
 üîÆüîÆüçÑüîÆüîÆ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`,
            '–ü–µ—â–µ—Ä–∞': ` üî¶üíÄüëπüíÄüî¶
  ‚ñì‚ñì‚ñìüíé‚ñì‚ñì‚ñì
 ‚ñì‚ñì‚ñë‚ñë‚ñë‚ñì‚ñì‚ñì
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`,
            '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞': `üèÜüí∞üí∞üí∞üèÜ
 üíéüíéüíéüíéüíé
 üîêüëëüëëüëëüîê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`
        };
        return locationArts[locationName] || locationArts['–ü–ª–æ—â–∞–¥—å'];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–∞
     */
    getMonsterArt(monsterName, level) {
        if (monsterName === '–í–æ–ª–∫') {
            return `     üê∫‚ùÑÔ∏è
    /\\üîµ\\    –£—Ä–æ–≤–µ–Ω—å ${level}
   /  \\/     –õ–µ–≥–∫–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
  üåôüí´üåô`;
        } else if (monsterName === '–ì–æ–±–ª–∏–Ω') {
            return `  üëπüî•‚öîÔ∏èüî•
 üü£üëπüéØüëπüü£
 üî•üëπüëπüëπüî•
üíÄ‚öîÔ∏èüíÄ‚öîÔ∏èüíÄ` + `   –£—Ä–æ–≤–µ–Ω—å ${level}
   –û–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫`;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
     */
    addXp(amount) {
        const player = this.gameState.player;
        player.xp += amount;
        
        this.addOutput(`‚ú® –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: ${amount} (–≤—Å–µ–≥–æ: ${player.xp}/${player.xpToNext})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if (player.xp >= player.xpToNext) {
            this.levelUp();
        }
        
        this.updateUI();
    }

    /**
     * –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
     */
    levelUp() {
        const player = this.gameState.player;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç
        const excessXp = player.xp - player.xpToNext;
        
        // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        player.level++;
        player.xp = excessXp;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const oldMaxHp = player.maxHp;
        const oldAttack = player.attack;
        
        player.maxHp += Math.floor(player.level * 3 + Math.random() * 5); // –°–ª—É—á–∞–π–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ HP
        player.attack += Math.floor(player.level / 2 + Math.random() * 2); // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
        
        // –õ–µ—á–∏–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP
        const healAmount = Math.floor((player.maxHp - oldMaxHp) / 2);
        player.hp += healAmount;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        player.xpToNext = Math.floor(100 * Math.pow(1.2, player.level - 1));
        
        this.showLevelUpNotification(oldMaxHp, oldAttack, player.maxHp, player.attack, healAmount);
        this.updateUI();
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
     */
    showLevelUpNotification(oldMaxHp, oldAttack, newMaxHp, newAttack, healAmount) {
        const notification = document.createElement('div');
        notification.className = 'level-up-notification';
        
        const player = this.gameState.player;
        const levelEffects = `
            <div class="level-effects">
                <div class="level-effect">
                    <span>HP:</span>
                    <span><span class="old-value">${oldMaxHp}</span> ‚Üí <span class="new-value">${newMaxHp}</span></span>
                </div>
                <div class="level-effect">
                    <span>–ê—Ç–∞–∫–∞:</span>
                    <span><span class="old-value">${oldAttack}</span> ‚Üí <span class="new-value">${newAttack}</span></span>
                </div>
                <div class="level-effect">
                    <span>–ò—Å—Ü–µ–ª–µ–Ω–∏–µ:</span>
                    <span class="new-value">+${healAmount} HP</span>
                </div>
                <div class="level-effect">
                    <span>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</span>
                    <span class="new-value">${player.xpToNext} –æ–ø—ã—Ç–∞</span>
                </div>
            </div>
        `;
        
        notification.innerHTML = `
            üéâ –£–†–û–í–ï–ù–¨ –ü–û–í–´–®–ï–ù! üéâ
            <br>
            ${player.name} —Ç–µ–ø–µ—Ä—å ${player.level} —É—Ä–æ–≤–Ω—è!
            ${levelEffects}
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 4000);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    executeCommand() {
        const input = document.getElementById('command-input').value.trim();
        if (!input) return;

        document.getElementById('command-input').value = '';
        this.addOutput(`> ${input}`);

        const parts = input.split(/\s+/);
        const command = parts[0].toLowerCase();
        const args = parts.slice(1);

        try {
            if (this.commands.has(command)) {
                this.commands.get(command)(args);
                this.gameState.score++; // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
            } else if (command === 'hello' && args.length > 0) {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏
                const playerName = args.join(' ');
                if (playerName.length >= 2 && playerName.length <= 20) {
                    this.gameState.player.name = playerName;
                    this.addOutput(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${playerName}!`);
                    this.addOutput('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: look, move north');
                } else {
                    this.addOutput('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤');
                }
            } else {
                this.addOutput(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                this.addOutput('–í–≤–µ–¥–∏—Ç–µ \'help\' –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
            }
        } catch (error) {
            this.addOutput(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }

        this.updateUI();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateUI() {
        const player = this.gameState.player;
        const location = this.gameState.world[this.gameState.currentLocation];

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        document.getElementById('character-class').textContent = `üó°Ô∏è ${player.class} ${player.level} —É—Ä–æ–≤–Ω—è`;
        document.getElementById('character-art').textContent = this.getCharacterArt();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        document.getElementById('detailed-hp').textContent = `${player.hp}/${player.maxHp}`;
        document.getElementById('detailed-attack').textContent = player.attack;
        document.getElementById('detailed-level').textContent = player.level;
        document.getElementById('detailed-xp').textContent = `${player.xp}/${player.xpToNext}`;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        const hpPercentage = (player.hp / player.maxHp) * 100;
        document.getElementById('hp-bar').style.width = `${hpPercentage}%`;
        
        const xpPercentage = (player.xp / player.xpToNext) * 100;
        document.getElementById('xp-bar').style.width = `${Math.min(xpPercentage, 100)}%`;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        document.getElementById('player-name').textContent = player.name;
        document.getElementById('player-hp').textContent = `‚ù§Ô∏è HP: ${player.hp}/${player.maxHp}`;
        document.getElementById('player-attack').textContent = `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${player.attack}`;
        document.getElementById('player-score').textContent = `‚≠ê –°—á–µ—Ç: ${this.gameState.score}`;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–∏
        if (location) {
            document.getElementById('location-name').textContent = location.name;
            document.getElementById('location-art').textContent = this.getLocationArt(location.name);
            document.getElementById('location-description').textContent = location.description;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏
            const locationVisual = document.getElementById('location-visual');
            locationVisual.classList.add('location-transition');
            setTimeout(() => locationVisual.classList.remove('location-transition'), 500);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏
            this.updateLocationItems(location);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏
            this.updateLocationMonster(location);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
            this.updateLocationExits(location);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.updateDetailedInventory();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        this.updateQuickActions();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏
     */
    updateLocationItems(location) {
        const container = document.getElementById('location-items-grid');
        container.innerHTML = '';

        if (location.items.length === 0) {
            container.innerHTML = '<div style="grid-column: 1/-1; text-align: center; color: #999; padding: 2rem;">–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç</div>';
            return;
        }

        location.items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'location-item';
            
            const iconMap = {
                weapon: '‚öîÔ∏è',
                potion: 'üß™',
                key: 'üîë'
            };
            
            itemElement.innerHTML = `
                <div class="item-icon ${item.type === 'weapon' ? 'item-weapon' : item.type === 'potion' ? 'item-potion' : 'item-key'}">
                    ${iconMap[item.type] || 'üì¶'}
                </div>
                <div class="item-name">${item.name}</div>
                <div class="item-effect">
                    ${item.type === 'weapon' ? `+${item.attackBonus} –∞—Ç–∞–∫–∞` : 
                      item.type === 'potion' ? `+${item.heal} HP` : 
                      '–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä–∏'}
                </div>
            `;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            const player = this.gameState.player;
            const isFull = player.inventory.length >= player.maxInventorySlots;
            if (isFull) {
                itemElement.classList.add('inventory-full');
            }
            
            itemElement.onclick = () => {
                if (!isFull) {
                    this.executeCommandByName('take', [item.name]);
                } else {
                    this.addOutput('‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω! –û—Å–≤–æ–±–æ–¥–∏—Ç–µ —Å–ª–æ—Ç.');
                }
            };
            
            container.appendChild(itemElement);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏
     */
    updateLocationMonster(location) {
        const monsterDisplay = document.getElementById('monster-display');
        
        if (!location.monster) {
            monsterDisplay.classList.add('hidden');
            return;
        }

        monsterDisplay.classList.remove('hidden');
        
        const monsterHtml = `
            <div class="monster-name">${location.monster.name}</div>
            <div class="monster-art">${this.getMonsterArt(location.monster.name, location.monster.level)}</div>
            <div class="monster-stats">
                <div class="monster-stat">
                    <div class="monster-level">‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${location.monster.level}</div>
                </div>
                <div class="monster-stat">
                    <div class="monster-hp">‚ù§Ô∏è HP: ${location.monster.hp}</div>
                </div>
            </div>
        `;
        
        monsterDisplay.innerHTML = monsterHtml;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
     */
    updateLocationExits(location) {
        const exitsContainer = document.getElementById('location-exits');
        const exits = Object.keys(location.exits);
        
        if (exits.length === 0) {
            exitsContainer.innerHTML = '<div style="text-align: center; color: #999;">üö´ –í—ã—Ö–æ–¥–æ–≤ –Ω–µ—Ç</div>';
            return;
        }
        
        const exitElements = exits.map(direction => {
            const directionNames = {
                north: { name: '–°–µ–≤–µ—Ä', arrow: '‚¨ÜÔ∏è' },
                south: { name: '–Æ–≥', arrow: '‚¨áÔ∏è' },
                east: { name: '–í–æ—Å—Ç–æ–∫', arrow: '‚û°Ô∏è' },
                west: { name: '–ó–∞–ø–∞–¥', arrow: '‚¨ÖÔ∏è' }
            };
            
            const dir = directionNames[direction];
            return `
                <button class="btn btn-small" onclick="game.executeCommandByName('move', ['${direction}'])">
                    ${dir.arrow} ${dir.name} ‚Üí ${location.exits[direction]}
                </button>
            `;
        }).join('');
        
        exitsContainer.innerHTML = `
            <h4>üö™ –í—ã—Ö–æ–¥—ã:</h4>
            <div style="display: flex; gap: 0.5rem; flex-wrap: wrap; margin-top: 0.5rem;">
                ${exitElements}
            </div>
        `;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    updateDetailedInventory() {
        const container = document.getElementById('detailed-inventory-grid');
        const inventory = this.gameState.player.inventory;
        const maxSlots = this.gameState.player.maxInventorySlots;
        
        container.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        for (let i = 0; i < maxSlots; i++) {
            const slot = document.createElement('div');
            slot.className = 'inventory-slot';
            
            if (i < inventory.length) {
                const item = inventory[i];
                const iconMap = {
                    weapon: '‚öîÔ∏è',
                    potion: 'üß™',
                    key: 'üîë'
                };
                
                slot.innerHTML = `
                    <div class="item-icon ${item.type === 'weapon' ? 'item-weapon' : item.type === 'potion' ? 'item-potion' : 'item-key'}">
                        ${iconMap[item.type] || 'üì¶'}
                    </div>
                    <div class="item-name">${item.name}</div>
                    <div class="item-type">${item.type === 'weapon' ? '–û—Ä—É–∂–∏–µ' : item.type === 'potion' ? '–ó–µ–ª—å–µ' : '–ö–ª—é—á'}</div>
                `;
                
                slot.onclick = () => this.executeCommandByName('use', [item.name]);
            } else {
                slot.classList.add('empty');
                slot.innerHTML = '<div style="color: #666;">–ü—É—Å—Ç–æ</div>';
            }
            
            container.appendChild(slot);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    updateInventory() {
        const inventoryContainer = document.getElementById('inventory-items');
        const inventory = this.gameState.player.inventory;

        if (inventory.length === 0) {
            inventoryContainer.textContent = '–ü—É—Å—Ç';
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É
        const grouped = {};
        inventory.forEach(item => {
            const type = item.type;
            if (!grouped[type]) grouped[type] = [];
            grouped[type].push(item);
        });

        const html = Object.keys(grouped).sort().map(type => {
            const typeNames = {
                weapon: '–û—Ä—É–∂–∏–µ',
                potion: '–ó–µ–ª—å—è',
                key: '–ö–ª—é—á–∏'
            };
            const items = grouped[type].map(item => item.name).sort().join(', ');
            return `- ${typeNames[type] || type} (${grouped[type].length}): ${items}`;
        }).join('<br>');

        inventoryContainer.innerHTML = html;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
     */
    updateQuickActions() {
        const location = this.gameState.world[this.gameState.currentLocation];
        const quickActions = document.getElementById('quick-actions');

        // –ö–Ω–æ–ø–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        const movementContainer = document.getElementById('movement-buttons');
        movementContainer.innerHTML = '';

        Object.entries(location.exits).forEach(([direction, roomName]) => {
            const button = document.createElement('button');
            const directionNames = {
                north: '–°–µ–≤–µ—Ä', south: '–Æ–≥', east: '–í–æ—Å—Ç–æ–∫', west: '–ó–∞–ø–∞–¥'
            };
            button.textContent = `‚û°Ô∏è ${directionNames[direction]}`;
            button.className = 'movement-btn';
            button.onclick = () => this.executeCommandByName('move', [direction]);
            movementContainer.appendChild(button);
        });

        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const itemContainer = document.getElementById('item-buttons');
        itemContainer.innerHTML = '';

        location.items.forEach(item => {
            const button = document.createElement('button');
            button.textContent = `üéí –í–∑—è—Ç—å ${item.name}`;
            button.className = 'item-btn';
            button.onclick = () => this.executeCommandByName('take', [item.name]);
            itemContainer.appendChild(button);
        });

        // –ö–Ω–æ–ø–∫–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤
        const monsterContainer = itemContainer.cloneNode(true);
        monsterContainer.innerHTML = '';
        monsterContainer.className = 'monster-buttons';

        if (location.monster) {
            const button = document.createElement('button');
            button.textContent = `‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å ${location.monster.name}`;
            button.className = 'monster-btn';
            button.onclick = () => this.executeCommandByName('fight', []);
            monsterContainer.appendChild(button);
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
        const hasActions = movementContainer.children.length > 0 || 
                         itemContainer.children.length > 0 || 
                         monsterContainer.children.length > 0;
        
        quickActions.classList.toggle('hidden', !hasActions);
        quickActions.appendChild(monsterContainer);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏
     */
    executeCommandByName(commandName, args) {
        const input = document.getElementById('command-input');
        input.value = `${commandName} ${args.join(' ')}`.trim();
        this.executeCommand();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–≤–æ–¥
     */
    addOutput(message) {
        const output = document.getElementById('game-output');
        const div = document.createElement('div');
        div.className = 'game-message';
        div.textContent = message;
        output.appendChild(div);
        output.scrollTop = output.scrollHeight;
    }

    /**
     * –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã
     */

    showHelp() {
        const commandList = Array.from(this.commands.keys()).sort().join(', ');
        this.addOutput(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${commandList}`);
        this.addOutput('–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    }

    look() {
        const location = this.gameState.world[this.gameState.currentLocation];
        if (!location) {
            this.addOutput('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è');
            return;
        }

        this.addOutput(location.name + ': ' + location.description);
        
        if (location.items.length > 0) {
            this.addOutput('üéí –ü—Ä–µ–¥–º–µ—Ç—ã: ' + location.items.map(item => item.name).join(', '));
        }
        
        if (location.monster) {
            this.addOutput(`üëπ –í –∫–æ–º–Ω–∞—Ç–µ –º–æ–Ω—Å—Ç—Ä: ${location.monster.name} (—É—Ä. ${location.monster.level})`);
        }
        
        if (Object.keys(location.exits).length > 0) {
            const exitNames = Object.keys(location.exits).map(dir => {
                const directionNames = {
                    north: '—Å–µ–≤–µ—Ä', south: '—é–≥', east: '–≤–æ—Å—Ç–æ–∫', west: '–∑–∞–ø–∞–¥'
                };
                return directionNames[dir];
            }).join(', ');
            this.addOutput('üö™ –í—ã—Ö–æ–¥—ã: ' + exitNames);
        }
    }

    move(args) {
        if (args.length === 0) {
            this.addOutput('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: move <north|south|east|west>');
            return;
        }

        const direction = args[0].toLowerCase();
        const location = this.gameState.world[this.gameState.currentLocation];

        if (!location.exits[direction]) {
            this.addOutput(`‚ùå –ù–µ—Ç –≤—ã—Ö–æ–¥–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: ${direction}`);
            return;
        }

        const newLocation = location.exits[direction];
        this.gameState.currentLocation = newLocation;
        
        this.addOutput(`‚û°Ô∏è –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤: ${newLocation}`);
        this.addOutput(this.gameState.world[newLocation].description);
        
        this.updateUI();
    }

    take(args) {
        if (args.length === 0) {
            this.addOutput('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: take <item name>');
            return;
        }

        const itemName = args.join(' ');
        const location = this.gameState.world[this.gameState.currentLocation];
        const player = this.gameState.player;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if (player.inventory.length >= player.maxInventorySlots) {
            this.addOutput(`‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω! –ú–∞–∫—Å–∏–º—É–º ${player.maxInventorySlots} —Å–ª–æ—Ç–æ–≤.`);
            return;
        }
        
        const itemIndex = location.items.findIndex(item => 
            item.name.toLowerCase() === itemName.toLowerCase()
        );

        if (itemIndex === -1) {
            this.addOutput(`‚ùå –ü—Ä–µ–¥–º–µ—Ç '${itemName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ`);
            return;
        }

        const item = location.items.splice(itemIndex, 1)[0];
        player.inventory.push(item);
        
        this.addOutput(`‚úÖ –í–∑—è—Ç–æ: ${item.name} (${player.inventory.length}/${player.maxInventorySlots} —Å–ª–æ—Ç–æ–≤)`);
        this.gameState.score += 2;
        this.addXp(3); // –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ —Å–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        
        this.updateUI();
    }

    showInventory() {
        const inventory = this.gameState.player.inventory;

        if (inventory.length === 0) {
            this.addOutput('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç');
            return;
        }

        this.addOutput('üéí –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:');
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É
        const grouped = {};
        inventory.forEach(item => {
            const type = item.type;
            if (!grouped[type]) grouped[type] = [];
            grouped[type].push(item);
        });

        Object.keys(grouped).sort().forEach(type => {
            const typeNames = {
                weapon: '–û—Ä—É–∂–∏–µ',
                potion: '–ó–µ–ª—å—è',
                key: '–ö–ª—é—á–∏'
            };
            const items = grouped[type].map(item => item.name).sort();
            this.addOutput(`- ${typeNames[type] || type} (${grouped[type].length}): ${items.join(', ')}`);
        });
    }

    use(args) {
        if (args.length === 0) {
            this.addOutput('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: use <item name>');
            return;
        }

        const itemName = args.join(' ');
        const player = this.gameState.player;
        
        const itemIndex = player.inventory.findIndex(item => 
            item.name.toLowerCase() === itemName.toLowerCase()
        );

        if (itemIndex === -1) {
            this.addOutput(`‚ùå –ü—Ä–µ–¥–º–µ—Ç '${itemName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ`);
            return;
        }

        const item = player.inventory[itemIndex];
        this.applyItem(item);
        player.inventory.splice(itemIndex, 1);
        
        this.updateUI();
    }

    applyItem(item) {
        const player = this.gameState.player;
        
        switch (item.type) {
            case 'potion':
                const healAmount = Math.min(item.heal, player.maxHp - player.hp);
                player.hp += healAmount;
                this.addXp(5); // –ù–µ–±–æ–ª—å—à–æ–π –æ–ø—ã—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª—å—è
                this.addOutput(`üß™ –í—ã–ø–∏—Ç–æ –∑–µ–ª—å–µ '${item.name}': +${healAmount} HP. –¢–µ–∫—É—â–µ–µ HP: ${player.hp}`);
                break;
                
            case 'weapon':
                player.attack += item.attackBonus;
                this.addOutput(`‚öîÔ∏è –û—Ä—É–∂–∏–µ '${item.name}' —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ. –ê—Ç–∞–∫–∞ —Ç–µ–ø–µ—Ä—å: ${player.attack}`);
                break;
                
            case 'key':
                this.addOutput(`üîë –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${item.name}`);
                if (this.useKey(item)) {
                    this.gameState.score += 20;
                }
                break;
                
            default:
                this.addOutput(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.type}`);
        }
    }

    useKey(keyItem) {
        const current = this.gameState.world[this.gameState.currentLocation];
        let doorOpened = false;

        // –ü–µ—â–µ—Ä–∞ -> –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞
        if (current.name === '–ü–µ—â–µ—Ä–∞' && keyItem.canOpen.includes('–ü–µ—â–µ—Ä–∞->–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞')) {
            current.exits.north = '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞';
            this.addOutput('üîë –î–≤–µ—Ä—å –≤ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É –æ—Ç–∫—Ä—ã—Ç–∞!');
            doorOpened = true;
        }
        
        // –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ -> –ü–µ—â–µ—Ä–∞
        else if (current.name === '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞' && keyItem.canOpen.includes('–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞->–ü–µ—â–µ—Ä–∞')) {
            current.exits.south = '–ü–µ—â–µ—Ä–∞';
            this.addOutput('üîë –î–≤–µ—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–µ—â–µ—Ä—É –æ—Ç–∫—Ä—ã—Ç–∞!');
            doorOpened = true;
        }
        
        else {
            this.addOutput('üîë –ö–ª—é—á –∑–≤–µ–Ω–∏—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≥–¥–µ-—Ç–æ –µ—Å—Ç—å –¥–≤–µ—Ä—å...');
        }
        
        return doorOpened;
    }

    fight() {
        const location = this.gameState.world[this.gameState.currentLocation];
        
        if (!location.monster) {
            this.addOutput('‚ùå –í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è –±–æ—è');
            return;
        }

        this.startBattle(location.monster);
    }

    startBattle(monster) {
        this.gameState.isInBattle = true;
        this.gameState.currentBattle = monster;
        
        this.addOutput(`‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π —Å ${monster.name}!`);
        
        // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è –±–æ—è
        this.createBattleUI(monster);
    }

    createBattleUI(monster) {
        const output = document.getElementById('game-output');
        const battleUI = document.createElement('div');
        battleUI.className = 'battle-ui';
        battleUI.innerHTML = `
            <div class="battle-info">
                <div class="combatant">
                    <strong>${this.gameState.player.name}</strong>: HP = ${this.gameState.player.hp}, –ê—Ç–∞–∫–∞ = ${this.gameState.player.attack}
                </div>
                <div class="combatant">
                    <strong>${monster.name}</strong>: HP = ${monster.hp}, –£—Ä–æ–≤–µ–Ω—å = ${monster.level}
                </div>
            </div>
            <div class="battle-actions">
                <button class="btn btn-primary" onclick="game.battleAction('attack')">‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å</button>
                <button class="btn btn-secondary" onclick="game.battleAction('run')">üèÉ –ë–µ–∂–∞—Ç—å</button>
            </div>
        `;
        output.appendChild(battleUI);
    }

    battleAction(action) {
        const monster = this.gameState.currentBattle;
        
        if (action === 'run') {
            this.addOutput('üèÉ –í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–æ—è!');
            this.endBattle();
            return;
        }

        if (action === 'attack') {
            // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
            const player = this.gameState.player;
            const playerDamage = player.attack;
            monster.hp -= playerDamage;
            
            this.addOutput(`‚öîÔ∏è –í—ã –±—å—ë—Ç–µ ${monster.name} –Ω–∞ ${playerDamage}. HP –º–æ–Ω—Å—Ç—Ä–∞: ${Math.max(0, monster.hp)}`);

            if (monster.hp <= 0) {
                this.addOutput(`üéâ –ú–æ–Ω—Å—Ç—Ä ${monster.name} –ø–æ–±–µ–∂–¥–µ–Ω!`);
                
                // –í—ã–ø–∞–¥–µ–Ω–∏–µ –ª—É—Ç–∞
                const location = this.gameState.world[this.gameState.currentLocation];
                if (location.items.length > 0) {
                    this.addOutput('üí∞ –ú–æ–Ω—Å—Ç—Ä –≤—ã—Ä–æ–Ω–∏–ª –ø—Ä–µ–¥–º–µ—Ç—ã: ' + location.items.map(item => item.name).join(', '));
                }
                
                // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º
                const xpReward = monster.level * 15 + Math.floor(Math.random() * 10);
                this.addXp(xpReward);
                
                // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
                this.gameState.score += monster.level * 10;
                
                location.monster = null;
                this.endBattle();
                this.updateUI();
                return;
            }

            // –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
            const monsterDamage = monster.level;
            player.hp -= monsterDamage;
            this.addOutput(`üëπ –ú–æ–Ω—Å—Ç—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ${monsterDamage}. –í–∞—à–µ HP: ${Math.max(0, player.hp)}`);

            if (player.hp <= 0) {
                this.addOutput('üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
                this.gameOver();
                return;
            }
            
            this.updateBattleUI(monster);
        }
    }

    updateBattleUI(monster) {
        const battleUI = document.querySelector('.battle-ui .battle-info');
        if (battleUI) {
            battleUI.innerHTML = `
                <div class="combatant">
                    <strong>${this.gameState.player.name}</strong>: HP = ${this.gameState.player.hp}, –ê—Ç–∞–∫–∞ = ${this.gameState.player.attack}
                </div>
                <div class="combatant">
                    <strong>${monster.name}</strong>: HP = ${monster.hp}, –£—Ä–æ–≤–µ–Ω—å = ${monster.level}
                </div>
            `;
        }
        
        this.updateUI();
    }

    endBattle() {
        this.gameState.isInBattle = false;
        this.gameState.currentBattle = null;
        
        const battleUI = document.querySelector('.battle-ui');
        if (battleUI) {
            battleUI.remove();
        }
    }

    gameOver() {
        this.addOutput('=== –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê ===');
        this.addOutput(`–í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: ${this.gameState.score}`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        setTimeout(() => {
            if (confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?')) {
                this.restartGame();
            }
        }, 1000);
    }

    restartGame() {
        this.gameState.player.hp = 20;
        this.gameState.player.maxHp = 20;
        this.gameState.player.attack = 5;
        this.gameState.player.level = 1;
        this.gameState.player.xp = 0;
        this.gameState.player.xpToNext = 100;
        this.gameState.player.class = '–í–æ–∏–Ω';
        this.gameState.player.inventory = [];
        this.gameState.player.maxInventorySlots = 8;
        this.gameState.score = 0;
        this.gameState.currentLocation = '–ü–ª–æ—â–∞–¥—å';
        this.gameState.isInBattle = false;
        this.gameState.currentBattle = null;
        
        document.getElementById('game-output').innerHTML = '';
        this.addOutput('=== –ù–û–í–ê–Ø –ò–ì–†–ê ===');
        this.updateUI();
    }

    whoami() {
        const player = this.gameState.player;
        this.addOutput(`üë§ –í—ã: ${player.name} (${player.class})`);
        this.addOutput(`‚≠ê –£—Ä–æ–≤–µ–Ω—å ${player.level} | üéí –ö–ª–∞—Å—Å: ${player.class}`);
        this.addOutput(`‚ù§Ô∏è HP: ${player.hp}/${player.maxHp} | ‚öîÔ∏è –ê—Ç–∞–∫–∞: ${player.attack}`);
        this.addOutput(`‚ú® –û–ø—ã—Ç: ${player.xp}/${player.xpToNext}`);
        this.addOutput(`üèÜ –ü—Ä–∏–∑–æ–≤—ã–µ –æ—á–∫–∏: ${this.gameState.score}`);
        this.addOutput(`üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${player.inventory.length}/${player.maxInventorySlots}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
        const progressPercent = Math.round((player.xp / player.xpToNext) * 100);
        this.addOutput(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ ${player.level + 1} —É—Ä–æ–≤–Ω—é: ${progressPercent}%`);
    }

    name(args) {
        if (args.length === 0) {
            this.addOutput(`üìù –¢–µ–∫—É—â–µ–µ –∏–º—è: ${this.gameState.player.name}`);
            this.addOutput('–î–ª—è —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: name <–Ω–æ–≤–æ–µ_–∏–º—è>');
            return;
        }

        const newName = args.join(' ').trim();
        if (newName.length < 2) {
            this.addOutput('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return;
        }
        if (newName.length > 20) {
            this.addOutput('‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)');
            return;
        }

        const oldName = this.gameState.player.name;
        this.gameState.player.name = newName;
        this.addOutput(`üìù –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ: ${oldName} ‚Üí ${newName}`);
        this.gameState.score += 5;
        
        this.updateUI();
    }

    examine() {
        const location = this.gameState.world[this.gameState.currentLocation];
        this.addOutput(location.description);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–µ—Ä—Ç—ã—Ö –¥–≤–µ—Ä–µ–π
        if (location.name === '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞') {
            if (!location.exits.south) {
                this.addOutput('üö™ –í—ã –≤–∏–¥–∏—Ç–µ –∑–∞–ø–µ—Ä—Ç—É—é –¥–≤–µ—Ä—å –Ω–∞ —é–≥. –ù—É–∂–µ–Ω –∫–ª—é—á.');
            }
        }
        
        if (location.name === '–ü–µ—â–µ—Ä–∞') {
            if (!location.exits.north) {
                this.addOutput('üö™ –í—ã –≤–∏–¥–∏—Ç–µ –∑–∞–ø–µ—Ä—Ç—É—é –¥–≤–µ—Ä—å –Ω–∞ —Å–µ–≤–µ—Ä. –ù—É–∂–µ–Ω –∫–ª—é—á.');
            }
        }
    }

    showScores() {
        this.addOutput('üèÜ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
        this.addOutput(`üí° –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${this.gameState.score}`);
    }

    save(args) {
        const saveName = args.length > 0 ? args.join('_') : 'untitled';
        try {
            const saveData = {
                gameState: this.gameState,
                timestamp: new Date().toISOString(),
                version: '2.0' // –í–µ—Ä—Å–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π
            };
            localStorage.setItem(`dungeon_save_${saveName}`, JSON.stringify(saveData));
            this.addOutput(`‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: ${saveName}`);
            this.addOutput(`üìä –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${this.gameState.player.level}`);
            this.addOutput(`üéØ –û–±—â–∏–π –æ–ø—ã—Ç: ${this.gameState.player.xp + this.gameState.player.level * 100}`);
        } catch (error) {
            this.addOutput('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
        }
    }

    load(args) {
        const saveName = args.length > 0 ? args.join('_') : 'untitled';
        try {
            const savedData = localStorage.getItem(`dungeon_save_${saveName}`);
            if (savedData) {
                const parsed = JSON.parse(savedData);
                this.gameState = parsed.gameState;
                this.addOutput(`‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: ${saveName}`);
                this.addOutput('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
                this.look();
                this.updateUI();
            } else {
                this.addOutput(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${saveName}`);
            }
        } catch (error) {
            this.addOutput('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ' + error.message);
        }
    }

    showAbout() {
        this.addOutput('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        this.addOutput('‚ïë           DUNGEON MINI           ‚ïë');
        this.addOutput('‚ïë        –í–µ–±-–≤–µ—Ä—Å–∏—è RPG –∏–≥—Ä—ã       ‚ïë');
        this.addOutput('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        this.addOutput('');
        this.addOutput('üìñ –û–ü–ò–°–ê–ù–ò–ï:');
        this.addOutput('   –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä, —Å—Ä–∞–∂–∞–π—Ç–µ—Å—å —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏,');
        this.addOutput('   —Å–æ–±–∏—Ä–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—ã—Ö–æ–¥!');
        this.addOutput('');
        this.addOutput('‚öôÔ∏è  –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
        this.addOutput('   –í–µ—Ä—Å–∏—è: JavaScript Web Application');
        this.addOutput('   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript');
        this.addOutput('   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: LocalStorage –±—Ä–∞—É–∑–µ—Ä–∞');
        this.addOutput('');
        this.addOutput('üìû –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \'help\'');
    }

    exit() {
        this.addOutput('üëã –ü—Ä–æ—â–∞–π—Ç–µ!');
        setTimeout(() => {
            if (confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?')) {
                this.save(['manual_exit']);
            }
        }, 500);
    }

    clearOutput() {
        document.getElementById('game-output').innerHTML = '';
        this.addOutput('–í—ã–≤–æ–¥ –æ—á–∏—â–µ–Ω.');
    }
}

/**
 * UI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */
function showCommands() {
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('game-section').className = 'game-section hidden';
    document.getElementById('commands-section').classList.remove('hidden');
    document.getElementById('about-section').className = 'about-section hidden';
}

function hideCommands() {
    document.getElementById('commands-section').className = 'commands-section hidden';
}

function showAbout() {
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('game-section').className = 'game-section hidden';
    document.getElementById('commands-section').className = 'commands-section hidden';
    document.getElementById('about-section').classList.remove('hidden');
}

function hideAbout() {
    document.getElementById('about-section').className = 'about-section hidden';
}

function startGame() {
    document.getElementById('main-menu').style.display = 'none';
    document.getElementById('game-section').className = 'game-section';
    document.getElementById('commands-section').className = 'commands-section hidden';
    document.getElementById('about-section').className = 'about-section hidden';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (!window.game) {
        window.game = new DungeonGame();
    }
}

function backToMenu() {
    document.getElementById('main-menu').style.display = 'block';
    document.getElementById('game-section').className = 'game-section hidden';
}

function showGameCommands() {
    showCommands();
    setTimeout(() => startGame(), 100);
}

function executeQuickCommand(command) {
    if (window.game) {
        window.game.executeCommandByName(command, []);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('Dungeon Mini Game –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
});
